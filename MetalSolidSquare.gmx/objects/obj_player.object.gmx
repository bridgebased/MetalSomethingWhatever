<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hitpoints = 100;
dir = 0;
hspd = 0;
vspd = 0;
spd = 6;
shot_delay = 8;
vari = 1;
alarm[0]=0;
maxSpd = 8;
shot = false;

//reload and limited ammo
fullMag = 8;
maxAmmo = 64;
ammo = fullMag;
booleanFull =true;
//visibility
visibility = 3;
//grab distance
grabRange = 32;

aiming = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//bullet delay alarm
alarm[0] =0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move the player        
// Set speed and direction when key pressed
hspd = keyboard_check(ord('D'))-keyboard_check(ord('A'));
vspd = keyboard_check(ord('S'))-keyboard_check(ord('W'));
dir = point_direction(x,y,mouse_x,mouse_y);
fire = (mouse_check_button_pressed(mb_left) &amp;&amp; alarm[0] &lt;=0);
reload = keyboard_check_pressed(ord('R'));
hugWall = keyboard_check(vk_space);
drawWep = (mouse_check_button(mb_right));

if (!place_meeting(x+hspd*spd, y, obj_wall))
{
    x+= hspd*spd;
}
if (!place_meeting(x, y+vspd*spd, obj_wall))
{
    y+= vspd*spd;
}

if (drawWep)
{
    aiming = true;
    if (fire &amp;&amp; ammo&gt;0)
    {
        //reset alarm and subtract ammo
        alarm[0] = shot_delay;
        ammo -=1;
     
        //Find target
        var temp_dir = dir+random_range(-vari, vari);
        var temp_x = x+lengthdir_x(48, temp_dir);
        var temp_y = y+lengthdir_y(48, temp_dir);
        var start_x = temp_x;
        var start_y = temp_y;
        var collision = (position_meeting(temp_x, temp_y, obj_wall) || position_meeting(temp_x, temp_y, obj_target));
        while (!collision &amp;&amp; distance_to_point(temp_x, temp_y) &lt; room_width) 
        {
            temp_x += lengthdir_x(4, temp_dir);
            temp_y += lengthdir_y(4, temp_dir);   
            collision = (position_meeting(temp_x, temp_y, obj_wall) || position_meeting(temp_x, temp_y, obj_target));
        }
        var shot = instance_create(temp_x, temp_y, obj_shot);
        shot.start_x = start_x;
        shot.start_y = start_y;
    }
}
else
aiming = false;
//Ammo system
if (ammo &lt;= fullMag)
{
    booleanFull = false;
    if(reload &amp;&amp; !booleanFull)
    {
        maxAmmo -= (fullMag-ammo);
        ammo = fullMag;
        booleanFull = true;    
    }

}
//MoveSpeed adjust
increaseSpd = mouse_wheel_up() || keyboard_check(vk_shift);
decreaseSpd = mouse_wheel_down() || keyboard_check(vk_control);
if (increaseSpd &amp;&amp; spd &lt; maxSpd)
{
    spd += 1;
}

if (decreaseSpd)
{
    spd -= 1;
    if (spd &lt;= 0)
    {spd=1;}
}

if (hitpoints == 0 || hitpoints &lt; 0)
{
    game_restart();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// scr_player_check_hidden()
 
// Are you hidden?
if(place_meeting(x, y, col_hiding_1)) // Kinda hidden?
{
    visibility = 2;
    image_alpha = 0.9;
}
else if(place_meeting(x, y, col_hiding_2)) // Pretty well hidden?
{
    visibility = 1;
    image_alpha = 0.7;
}
else if(place_meeting(x, y, col_hiding_3))// Suuuuper well hidden?
{
    visibility = 0;
    image_alpha = 0.5;
}
else // Not hidden at all :(
{
    visibility = 3;
    image_alpha = 1.0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wall hugging
wallNear = collision_circle(x,y,grabRange,obj_wall,false, true);
/*if (hugWall)
{
    with (wallNear )
    {
    image_angle = other.direction;
    obj_player.x = obj_wall.x;
    obj_player.y = obj_wall.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Holdup
if (aiming)
{
    sightLine = collision_line (x,y, mouse_x,mouse_y, obj_guard,false, false);
    with (other)
    {
        heldUp = true;
    }
    
}
else 
heldUp = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw player and gun
depth = -7;
draw_set_font(fnt_hud);
draw_self();
//draw_sprite_ext(spr_player,0,x,y,1,1,dir,c_white,1)

//draw health
draw_set_color(c_white);
draw_text_color(obj_player.x+20,obj_player.y-2, string(hitpoints), c_lime, c_lime, c_green, c_green,1);

draw_healthbar(obj_player.x+20, obj_player.y-25, obj_player.x+40, obj_player.y-35, ((spd/maxSpd)*100), c_black, c_white, c_white, 0, true, true);
draw_circle(x,y,grabRange,true);

draw_text(obj_player.x+20,obj_player.y-15, string(ammo)+string("/")+string(maxAmmo));
cursor_sprite =spr_cursor_grn;
if(aiming)
{
    draw_sprite_ext(spr_gun,0,x+5,y,1,1,dir,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
