<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_guard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//radius
detection_rad_3 = 150;
detection_rad_2 = 100;
detection_rad_1 = 50;
detection_rad_0 = 15;
//Cones
sight_cone_left = 60;
sight_cone_right = -60
detected = false;
enemySpeed = 4;
//variables
hitpoints = 5;
atkDis = 150;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>detected = false;
if (!collision_line(x,y,obj_player.x,obj_player.y,obj_wall,false,true)) //Check for wall
{
    //set Vision Cone
    cone_left = obj_guard.image_angle+sight_cone_left;
    if(cone_left &gt;359) { cone_left = cone_left-359 };
    cone_right = obj_guard.image_angle+sight_cone_right;
    if(cone_right &lt; 0) {cone_right = 359+cone_right};
    //get angle to player
    p_angle = point_direction (x,y,obj_player.x,obj_player.y);
    show_debug_message("Pangle: " +string(p_angle));
    show_debug_message("Lcone: "+string(cone_left));
    show_debug_message("Rcone: "+string(cone_right));
    //is player in cone?
    if (cone_right &gt; cone_left)
    {
        if (p_angle &lt;= cone_left or p_angle &gt;= cone_right) {in_cone =true};
        else {in_cone = false};
    }
    else
    {
        if (p_angle &lt;= cone_left and p_angle &gt;= cone_right){in_cone=true};
        else{in_cone = false};
    }
    //if in cone, act
    if (in_cone)
    {
        //get player distance
        dist_to_player = point_distance(x,y,obj_player.x,obj_player.y);
        //get player visibility
        p_vis = obj_player.visibility;
        //check if see
        if(p_vis ==3)
        {
            if(dist_to_player &lt; detection_rad_3)
            {
                obj_guard.image_angle = point_direction(x,y, obj_player.x, obj_player.y)
                detected = true;
            }
        }
        else if (p_vis == 2)
        {
            if(dist_to_player &lt; detection_rad_2) 
            {
                obj_guard.image_angle = point_direction(x,y, obj_player.x, obj_player.y)
                detected = true;
            }
        }       
        else if (p_vis == 1)
        {
            if(dist_to_player &lt; detection_rad_1) 
            {
                obj_guard.image_angle = point_direction(x,y, obj_player.x, obj_player.y)
                detected = true;
            }
        }
        else if (p_vis == 0)
        {
            if(dist_to_player &lt; detection_rad_0) 
            {
                obj_guard.image_angle = point_direction(x,y, obj_player.x, obj_player.y)
                detected = true;
            }
        }
    
    }
    else
    detected = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hitpoints == 0 || hitpoints&lt;0)
{
    instance_destroy();
}

if (detected)
{
    var dis = point_distance (x,y, obj_player.x,obj_player.y);

    if (dis &lt;= atkDis)
    {
        mp_potential_step_object(obj_player.x,obj_player.y,enemySpeed,obj_wall);
        alert = true;
    }
    else
    {
        state = scr_enemy_static;
        alert = false;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_circle(x,y, detection_rad_3,true);
draw_circle(x,y, detection_rad_2,true);
draw_circle(x,y, detection_rad_1,true);
draw_circle(x,y, detection_rad_0,true);
if (detected)
{
    draw_set_font(fnt_enemy);
    draw_set_color(c_red);
    draw_text(x,y-40,"!");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
